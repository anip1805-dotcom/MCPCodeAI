stages:
  - test
  - build
  - deploy
  - analyze

variables:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - .pythonlibs/

before_script:
  - python --version
  - pip install --upgrade pip

test:
  stage: test
  image: python:3.11
  script:
    - pip install -r requirements.txt || pip install mcp pyyaml anthropic
    - python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term
    - python test_client.py
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - .coverage
  only:
    - merge_requests
    - main
    - develop

lint:
  stage: test
  image: python:3.11
  script:
    - pip install ruff mypy
    - ruff check src/ --output-format=gitlab > ruff-report.json || true
    - mypy src/ --ignore-missing-imports || true
  artifacts:
    reports:
      codequality: ruff-report.json
  allow_failure: true
  only:
    - merge_requests
    - main

build_cache:
  stage: build
  image: python:3.11
  script:
    - python scripts/build_compressed_cache.py
    - ls -lh cache/
  artifacts:
    paths:
      - cache/
    expire_in: 1 week
  only:
    - main
    - develop

analyze_feedback:
  stage: analyze
  image: python:3.11
  script:
    - pip install pandas matplotlib
    - python scripts/analyze_feedback.py
  artifacts:
    paths:
      - analytics/
    expire_in: 30 days
  only:
    - schedules
    - main
  allow_failure: true

deploy_staging:
  stage: deploy
  image: python:3.11
  script:
    - echo "Deploying to staging environment..."
    - pip install -r requirements.txt
    - python -c "from src.mcp_server import DevelopmentGuidelinesServer; print('Server validation OK')"
  environment:
    name: staging
    url: https://staging.mcp-server.example.com
  only:
    - develop

deploy_production:
  stage: deploy
  image: python:3.11
  script:
    - echo "Deploying to production environment..."
    - pip install -r requirements.txt
    - python scripts/build_compressed_cache.py
    - echo "Production deployment complete"
  environment:
    name: production
    url: https://mcp-server.example.com
  only:
    - main
  when: manual

token_optimization_report:
  stage: analyze
  image: python:3.11
  script:
    - pip install -r requirements.txt || pip install mcp pyyaml anthropic
    - python scripts/token_optimizer_report.py
  artifacts:
    paths:
      - reports/token_usage_*.json
    expire_in: 90 days
  only:
    - schedules
  environment:
    name: analytics

# Schedule this job to run weekly:
# GitLab Project Settings > CI/CD > Schedules > New schedule
# Interval pattern: 0 2 * * 0 (Every Sunday at 2 AM)
# Target branch: main
# Variables: None required
